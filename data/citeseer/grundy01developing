Developing Adaptable User Interfaces for Component-based Systems Developing software components with user interfaces that can be adapted to diverse reuse situations is challenging. Examples of such adaptations include extending, composing and reconfiguring multiple component user interfaces, and adapting component user interfaces to particular user preferences, roles and subtasks. We describe our recent work in facilitating such adaptation via the concept of user interface aspects, which facilitate effective component user interface design and realisation using an extended, component-based software architecture.  1. Introduction  Component-based software applications are composed from diverse software components to form an application [1, 14, 16, 17]. Typically many of these components have been developed separately, with no knowledge of the user interfaces of other components they may be composed with. This can result in component-based applications with inappropriate, inconsistent interfaces.  For example, two components with user interfaces that ...
