Abduction with Negation as Failure for Active Databases and Agents Recent work has suggested abductive logic programming as a suitable formalism to represent active databases and intelligent agents. In particular, abducibles and integrity constaints in abductive logic programs can be used respectively to represent actions and active/reactive rules. One would expect that, in this approach, abductive proof procedures could provide the engine underlying active database management systems and agents. We analyse existing abductive proof procedures and argue that they are inadequate in handling these applications. The inadequacy is due to the "incorrect" treatment of negative literals in integrity constraints. We propose a new abductive proof procedure and give examples of how this proof procedure can be used to achieve active behaviour in (deductive) databases and proactivity and reactivity in agents.
