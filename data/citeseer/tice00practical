A Practical, Robust Method for Generating Variable Range Tables In optimized programs the location in which the current value of a single source variable may reside typically varies as the computation progresses. A debugger for optimized code needs to know all of the locations -- both registers and memory addresses -- in which a variable resides, and which locations are valid for which portions of the computation. Determining this information is known as the data location problem [3, 7]. Because optimizations frequently move variables around (between registers and memory or from one register to another) the compiler must build a table to keep track of this information. Such a table is known as a variable range table [3]. Once a variable range table has been constructed, finding a variable's current location reduces to the simple task of looking up the appropriate entry in the table.  The difficulty lies in collecting the data for building the table. Previous methods for collecting this data depend on which optimizations the compiler performs and ho...
