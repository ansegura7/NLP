Improvement in a Lazy Context: An Operational Theory for Call-By-Need The standard implementation technique for lazy functional languages is call-by-need, which ensures that an argument to a function in any given call is evaluated at most once. A significant problem with call-by-need is that it is difficult --- even for compiler writers --- to predict the effects of program transformations. The traditional theories for lazy functional languages are based on call-by-name models, and offer no help in determining which transformations do indeed optimize a program. In this article we present an operational theory for callby -need, based upon an improvement ordering on programs:  M is improved by N if in all program-contexts C,  when C[M ] terminates then C[N ] terminates at least as cheaply. We show that this improvement relation satisfies a "context lemma", and supports a rich inequational theory, subsuming the call-by-need lambda calculi of Ariola et al.  [AFM  +  95]. The reduction-based call-by-need calculi are inadequate as a theory of lazy-program tran...
