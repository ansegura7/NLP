Integrity Constraints: Semantics and Applications this paper.) Finally, by having ICs expressed in logic, one can use deduction and logic as one's basic and natural tools for handling, and reasoning over, database specifications (facts, rules, queries, and ICs). This applies for relational databases, with or without rules, and can be applied to object-oriented and object-relational databases as well. There is a broad body of work on logic and relational databases, and a general consensus on what databases (facts and rules) and queries mean. However, there is less work on the meaning of integrity constraints, and certainly no consensus. What is meant by an IC can differ widely. For instance, one may define that ICs must be consistent with the database, or define that they must be provable statements, deducible from the database. (This distinction is discussed in more detail in Section 3.2.) Another view is that ICs really represent meta-knowledge---knowledge about the database itself---and should, perhaps, be written in a nonclassical logic. The general situation becomes more complex when we permit databases to contain indefinite or disjunctive information or to use negation, as with IC 2 above. Subtle but profound differences in meaning can arise due to different interpretations of ICs. In many systems, the semantics for ICs is never made clear; at times, one interpretation seems intended, while at other times, another interpretation is evident. This ambiguity is dangerous, and could allow a database to become corrupt in unanticipated ways. In this chapter, we introduce integrity constraints in a logical framework and overview the various work that has been done on ICs in this context. Section 2 presents the basic definitions for databases and integrity constraints for the chapter. We consider various semantics of ICs,...
